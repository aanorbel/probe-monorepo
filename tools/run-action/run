#!/bin/bash

#doc: # ./tools/run-action
#doc:
#doc: This script runs an action by name. As mentioned above, the
#doc: action name, `<name>`, corresponds to a script named `action.bash`
#doc: at `./tools/run.d/<name>/action.bash`.
#doc:
#doc: The `action.bash` script must export the `action_name` func. The
#doc: `./tools/run-action` script will:

set -euo pipefail
echo "ðŸ¤“action name: $1"
echo "ðŸ¤“current time: $(date)"
echo "ðŸ¤“working directory: $workdir"

#doc:
#doc: * import the ./tools/libcore.bash library, so `action_main`
#doc: could use any function or variable inside this library as
#doc: well as inside any other library `libcore.bash` imports and
#doc: this basically means `./config/lib.bash`.
source ./tools/libcore.bash

source ./tools/run-action/lib.bash
run ./tools/status
if [[ ! -f $workdir/setup_defaults_once ]]; then
	setup_defaults_main
	touch $workdir/setup_defaults_once
fi

#doc:
#doc: * source the `./tools/run.d/<action-name>/action.bash` file.
source ./tools/run.d/$1/action.bash

#doc:
#doc: * call `action_main`.
action_main

#doc:
#doc: In addition to the variables and functions pulled from the
#doc: `./tools/libcore.bash` and `./config/lib.bash` files, the
#doc: environment running the action will _also_ define a variable
#doc: called `workdir`. This variable is the directory from which
#doc: an action _could_ read specific files generated by the previous
#doc: pipeline stages or in which it _could_ write its output.
#doc:
#doc: An action doesn't need to read anything or write anything
#doc: from the `workdir`. Whether to do that depends on the specific
#doc: action. Some actions have no `workdir` side effects.
#doc:
#doc: The action will run in the toplevel directory of the monorepo
#doc: repository and it _should_ change directory if needed. An
#doc: action does not need to worry about whether changing its own
#doc: working directory will affect subsequent pipeline stages, since
#doc: every pipeline stage runs independently.
#doc:
#doc: Additionally, the workflow-run system guarantees that each
#doc: incarnation of a workflow has its own `workdir`. (Though the
#doc: workflow-run also allows to re-use an existing `workdir`
#doc: for the purpose of restarting workflows that failed.)
